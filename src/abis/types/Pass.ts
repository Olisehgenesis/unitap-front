/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PassInterface extends utils.Interface {
  functions: {
    "MAX_SALE_COUNT()": FunctionFragment;
    "batchSize()": FunctionFragment;
    "batchSoldCount()": FunctionFragment;
    "multiMint(uint32,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "price()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "safe()": FunctionFragment;
    "startBatch(uint32)": FunctionFragment;
    "totalSoldCount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unitapPass()": FunctionFragment;
    "withdrawETH()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_SALE_COUNT"
      | "batchSize"
      | "batchSoldCount"
      | "multiMint"
      | "owner"
      | "price"
      | "renounceOwnership"
      | "safe"
      | "startBatch"
      | "totalSoldCount"
      | "transferOwnership"
      | "unitapPass"
      | "withdrawETH"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_SALE_COUNT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "batchSize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "batchSoldCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "multiMint",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "safe", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startBatch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSoldCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unitapPass",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawETH",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_SALE_COUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchSize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchSoldCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multiMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "safe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startBatch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSoldCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unitapPass", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawETH",
    data: BytesLike
  ): Result;

  events: {
    "MultiMint(address,uint32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StartBatch(uint32)": EventFragment;
    "WithdrawETH(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MultiMint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawETH"): EventFragment;
}

export interface MultiMintEventObject {
  to: string;
  count: number;
}
export type MultiMintEvent = TypedEvent<[string, number], MultiMintEventObject>;

export type MultiMintEventFilter = TypedEventFilter<MultiMintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StartBatchEventObject {
  batchSize: number;
}
export type StartBatchEvent = TypedEvent<[number], StartBatchEventObject>;

export type StartBatchEventFilter = TypedEventFilter<StartBatchEvent>;

export interface WithdrawETHEventObject {
  amount: BigNumber;
  to: string;
}
export type WithdrawETHEvent = TypedEvent<
  [BigNumber, string],
  WithdrawETHEventObject
>;

export type WithdrawETHEventFilter = TypedEventFilter<WithdrawETHEvent>;

export interface Pass extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PassInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_SALE_COUNT(overrides?: CallOverrides): Promise<[number]>;

    batchSize(overrides?: CallOverrides): Promise<[number]>;

    batchSoldCount(overrides?: CallOverrides): Promise<[number]>;

    multiMint(
      count: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    price(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    safe(overrides?: CallOverrides): Promise<[string]>;

    startBatch(
      batchSize_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSoldCount(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unitapPass(overrides?: CallOverrides): Promise<[string]>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_SALE_COUNT(overrides?: CallOverrides): Promise<number>;

  batchSize(overrides?: CallOverrides): Promise<number>;

  batchSoldCount(overrides?: CallOverrides): Promise<number>;

  multiMint(
    count: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  price(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  safe(overrides?: CallOverrides): Promise<string>;

  startBatch(
    batchSize_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSoldCount(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unitapPass(overrides?: CallOverrides): Promise<string>;

  withdrawETH(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_SALE_COUNT(overrides?: CallOverrides): Promise<number>;

    batchSize(overrides?: CallOverrides): Promise<number>;

    batchSoldCount(overrides?: CallOverrides): Promise<number>;

    multiMint(
      count: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    safe(overrides?: CallOverrides): Promise<string>;

    startBatch(
      batchSize_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSoldCount(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unitapPass(overrides?: CallOverrides): Promise<string>;

    withdrawETH(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "MultiMint(address,uint32)"(to?: null, count?: null): MultiMintEventFilter;
    MultiMint(to?: null, count?: null): MultiMintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "StartBatch(uint32)"(batchSize?: null): StartBatchEventFilter;
    StartBatch(batchSize?: null): StartBatchEventFilter;

    "WithdrawETH(uint256,address)"(
      amount?: null,
      to?: null
    ): WithdrawETHEventFilter;
    WithdrawETH(amount?: null, to?: null): WithdrawETHEventFilter;
  };

  estimateGas: {
    MAX_SALE_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    batchSize(overrides?: CallOverrides): Promise<BigNumber>;

    batchSoldCount(overrides?: CallOverrides): Promise<BigNumber>;

    multiMint(
      count: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    price(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    safe(overrides?: CallOverrides): Promise<BigNumber>;

    startBatch(
      batchSize_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSoldCount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unitapPass(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_SALE_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchSoldCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multiMint(
      count: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    price(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    safe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startBatch(
      batchSize_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSoldCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unitapPass(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawETH(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
